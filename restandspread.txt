In this exercise, you’ll refactor some ES5 code into ES2015.
Given this function:


function filterOutOdds() {
  var nums = Array.prototype.slice.call(arguments);
  return nums.filter(function(num) {
    return num % 2 === 0
  });
}

## Refactor it to use the rest operator & an arrow function:** ##
/* Write an ES2015 Version */

Const filterOutOdds = (...nums) => nums.filter(num => num % 2 === 0)
```


## **findMin** ##
Write a function called findMin that accepts a variable number of arguments and returns the smallest argument.
Make sure to do this using the rest and spread operator.

Const findMin = (...vals) => Math.min(... vals)
```

## **mergeObjects** ##
Write a function called ***mergeObjects*** that accepts two objects and returns a new object which contains all the keys and values of the first object and second object.

Const mergeObjects = (obj1, obj2) => ({...obj1, ...obj2});
```

## **doubleAndReturnArgs** ##
Write a function called ***doubleAndReturnArgs*** which accepts an array and a variable number of arguments. The function should return a new array with the original array values and all of additional arguments doubled.

Const doubleAndReturnArgs = (arr, ...args) => [...arr, ...args.map(a => a * 2)]
```

## **Slice and Dice!** ##
For this section, write the following functions using rest, spread and refactor these functions to be arrow functions!
Make sure that you are always returning a new array or object and not modifying the existing inputs.
```````

** remove a random element in the items array
and return a new array without that item. **

Const removeRandom = items => {
  const i = Math.floor(Math.random() * items.length);
  return [...items.slice(0, i), ...items.slice(i + 1)];
};
````````

** Return a new array with every item in array1 and array2.**

Const extend = (arr1, arr2) => [...arr1, ...arr2];
``````

** Return a new object with all the keys and values
from obj and a new key/value pair **

Const addKeyVal = (obj, key, val) => {
Let newObj = {...obj}
newObj[key] = val; 
Return newObj;
}
``````

** Return a new object with a key removed. **
const removeKey = (obj, key) => {
Let newObj = {...obj}
Delete newObj[key]
Return newObj; ;
};
``````

** Combine two objects and return a new object. **
const combine = (obj1, obj2) => ({ ...obj1, ...obj2 });
``````


** Return a new object with a modified key and value. **
const update = (obj, key, val) => {
Let newObj = {...obj}
newObj[key] = val; 
Return newObj;
}
```````

